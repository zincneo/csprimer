#include <iostream>

int main() {
    // C++任何一个对象要么是左值，要么是右值
    int i = 10; // i和10都是对象
    // 左值：拥有地址属性的对象就叫左值，左值来源于c语言的说法，能放在“=”左面的就是左值，注意，左值也可以放在“=”右面
    // 右值：不是左值的对象就是右值。或者说无法操作地址的对象就叫做右值。一般来说，判断一个对象是否为右值，就看它是不是左值，有没有地址属性，不是左值，那就是右值
    // 比如临时对象，就都是右值，临时对象的地址属性无法使用
    int i2 = i + 1; // i + 1这个表达式会产生一个临时对象，这个对象我们无法使用它的地址，所以是右值
    ++i = 200; // ++i 是左值 ++i本质是i自增1然后返回i变量本身，i的地址我们可以操作
    // i++ = 200;  i++ 是右值 i++的本质是先返回临时变量(是i原来值的拷贝，这个地址我们无法操作)，然后再让i自增1

    // 引用分类
    // 1. 普通左值引用：就是一个对象的别名，只能绑定左值，无法绑定常量对象
    int &ref_i = i;
    // const int j = 100;
    // int &ref_j = j; 这样就导致报错了，因为这么写就绕过了const修饰，编译器自然不允许
    // 2. const左值引用：可以对常量起别名，可以绑定左值和右值
    const int &ref_ii = i + 1; // const左值引用绑定到一个右值
    // 3. 右值引用（暂时不要去管右值引用有什么用，只要记住语法就可以了，实际用途后面就会讲到）：只能绑定右值的引用
    int &&rref_i = (i + 1); // 右值引用，使用两个取地址符
    // 4. 万能引用：这里不讲，等到涉及模板时再讲，这是一个很重要，但需要模板等基础的概念
    return 0;
}