#include <iostream>

// 变量的存储位置有三种，分别是静态变量区，栈区，堆区
// 静态变量区在编译时就已经确定地址，存储全局变量与静态变量

// 全局变量
unsigned g_i = 0; // 这行代码在程序编译时就已经初始化了
// 静态局部变量同样在编译期就初始化了

unsigned test() {
    static unsigned callCount = 0; // 运行期这一行就直接忽视了
    return ++callCount;
}

int main()
{
    g_i++; // 这行代码到程序运行期才执行
    // 指针都是存储在栈上或堆上，不管在栈上还是堆上，都一定有一个地址
    // 本质上说，指针和普通变量没有区别
    // 在32位系统中，int变量和指针都是32位。指针必须和“&”，“*”这两个符号一起使用才有意义
    int i = 20;
    int *pi = &i;
    // 所以指针才可以灵活的操作内存，但这也带来了严重的副作用，比如指针加加减减就可以操作内存，所以引用被发明了，引用就是作用阉割的指针（可以视为“类型*const”，所以引用必须上来就赋初值，不能设置为空），编译器不将其视作对象，操作引用相当于操作引用指向的对象。也就从根本是杜绝了引用篡改内存的能力
    int &ref_i = i;
    return 0;
}
